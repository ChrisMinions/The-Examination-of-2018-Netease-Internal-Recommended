'''
[编程题] 堆棋子
时间限制：1秒
空间限制：32768K
小易将n个棋子摆放在一张无限大的棋盘上。第i个棋子放在第x[i]行y[i]列。
同一个格子允许放置多个棋子。每一次操作小易可以把一个棋子拿起并将其移动到原格子的上、下、左、右的任意一个格子中。
小易想知道要让棋盘上出现有一个格子中至少有i(1 ≤ i ≤ n)个棋子所需要的最少操作次数.

输入描述:
输入包括三行,第一行一个整数n(1 ≤ n ≤ 50),表示棋子的个数
第二行为n个棋子的横坐标x[i](1 ≤ x[i] ≤ 10^9)
第三行为n个棋子的纵坐标y[i](1 ≤ y[i] ≤ 10^9)


输出描述:
输出n个整数,第i个表示棋盘上有一个格子至少有i个棋子所需要的操作数,以空格分割。行末无空格

如样例所示:
对于1个棋子: 不需要操作
对于2个棋子: 将前两个棋子放在(1, 1)中
对于3个棋子: 将前三个棋子放在(2, 1)中
对于4个棋子: 将所有棋子都放在(3, 1)中

输入例子1:
4
1 2 4 9
1 1 1 1

输出例子1:
0 1 3 10
'''

'''
解题思路：数学前提 + 三重循环嵌套
  要解出这道题目，必须要提前知道一个数学前提：放置棋子的格子的横坐标来自所有棋子的横坐标，纵坐标来自所有其次的纵坐标
  也就是说这道题目有n*n个可能的点，我们要做的就是遍历这n*n个点，找出最优解
  用results来存储不同棋子数需要的最小步数
  前两重循环用来遍历n*n个可能的点，找到一个点后，计算出所有点距离这个点的距离，并排序
  第三重循环对不同的棋子数进行遍历，得到在可能的点中达到不同的棋子数最少需要几步操作，与results对应位置中的值进行比较
  取其中更小的数更新results对应位置中的值
'''

'''
代码运行结果：
答案正确:恭喜！您提交的程序通过了所有的测试用例
'''

n = int(input())
x_cords = [i for i in map(int, input().split())]
y_cords = [j for j in map(int, input().split())]

results = [99999999] * n

for x_cord in x_cords:
    for y_cord in y_cords:
        accumulator = 0
        dis_list = sorted([abs(x_cord - x_cords[i]) + abs(y_cord - y_cords[i]) for i in range(n)])
        for i in range(n):
            accumulator += dis_list[i]
            if accumulator <= results[i]:
                results[i] = accumulator

print(' '.join(map(str, results)))
